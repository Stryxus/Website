---
import { Image } from 'astro:assets';

import IMG_avatar_pp from '@public/images/avatar_pp.avif';
import IMG_avatar_pp_alt from '@public/images/avatar_pp_alt.avif';
import SVG_fa_bars_solid from '@assets/icons/fa/bars-solid.svg';

const currentPath = Astro.url.pathname;
const navItems = [
    { path: '/', name: 'Home' },
    { path: '/notes', name: 'Notes' },
    { path: '/work', name: 'Work' },
    { path: '/play', name: 'Play' },
    { path: '/media', name: 'Media' },
]
---

<nav id="navigator" class="fixed w-full z-50" transition:persist="navigator">
    <div class="hidden md:grid grid-cols-[1fr_1fr_auto_1fr_1fr] w-full items-center">
        <div class="side justify-self-start ml-28">
            <p id="stryxus-status">Status: Fetching...</p>
        </div>
        <div class="buttons-container justify-self-end">
            {navItems.slice(1, 3).map((item) => (
                <a class={currentPath === item.path ? 'active' : ''} rel="noopener noreferrer nofollow" href={item.path} draggable="false" aria-label={`${item.name} Nav Button`}>
                    {item.name}
                </a>
            ))}
        </div>
        <a id="avatar-container" class={`justify-self-center cursor-pointer overflow-hidden ml-16 mr-16 p-2 ${currentPath === '/' ? ' active' : ''}`} rel="noopener noreferrer nofollow" href="/" draggable="false" aria-label="Home Nav Button">
            <img src={IMG_avatar_pp.src} alt="Avatar" decoding="async" loading="lazy" draggable="false" />
            <img src={IMG_avatar_pp_alt.src} alt="Avatar Alt" decoding="async" loading="lazy" draggable="false" />
        </a>
        <div class="buttons-container justify-self-start">
            {navItems.slice(3, 5).map((item) => (
                <a class={currentPath === item.path ? 'active' : ''} rel="noopener noreferrer nofollow" href={item.path} draggable="false" aria-label={`${item.name} Nav Button`}>
                    {item.name}
                </a>
            ))}
        </div>
        <div class="side justify-self-end mr-28">
            <p id="stryxus-clock" class="digital-clock"></p>
        </div>
    </div>
    <div id="mobile-menu" class="block md:hidden absolute text-center text-black font-medium">
        <button id="mobile-menu-button" class="flex items-center justify-center w-screen h-12 text-black focus:outline-none" aria-label="Mobile Nav Menu Button">
            <SVG_fa_bars_solid />
        </button>
        <div id="mobile-menu-dropdown" class="hidden">
            <div class="flex flex-col space-y-3 p-4">
                {navItems.map((item) => (
                    <a class={currentPath === item.path ? 'active' : ''} rel="noopener noreferrer nofollow" href={item.path} draggable="false" aria-label={`${item.name} Nav Button`}>
                        {item.name}
                    </a>
                ))}
            </div>
        </div>
    </div>
</nav>

<style lang="scss">
@use 'sass:math';
@use '@css/variables' as *;

$spacing: 24;

#navigator {
    top: #{$navigatorSpacing + px};
    height: #{$navigatorHeight + px};

    & > .row {
        justify-content: center;
        align-items: center;
    }

    .side {
        width: 200px;
    }

    #mobile-menu {
        background-color: rgba($green, $transparency);
        backdrop-filter: blur($blur);
    }

    #avatar-container, .buttons-container {
        backdrop-filter: blur($blur);
    }

    #avatar-container {
        $borderSize: 8px;

        border-radius: 100%;
        width: #{$navigatorHeight + px};
        height: #{$navigatorHeight + px};
        border: $borderSize solid rgba(0, 0, 0, $transparency);

        &.active {
            border: $borderSize solid rgba($green, $transparency);

            img {
                
                &:first-child {
                    opacity: 0;
                    z-index: 1;
                }

                &:last-child {
                    opacity: 1;
                    z-index: 2;
                }
            }
        }

        &:hover {
            border: $borderSize solid rgba($darkergreen, $transparency);

            img {

                &:first-child {
                    opacity: 0;
                    z-index: 1;
                }

                &:last-child {
                    opacity: 1;
                    z-index: 2;
                }
            }
        }

        img {
            position: absolute;
            left: 0px;
            right: 0px;
            top: 0px;
            bottom: 0px;
            padding-top: 8px;
            overflow: hidden;
            object-fit: contain;
            transition: opacity 1s ease-out;
            cursor: inherit;

            &:first-child {
                opacity: 1;
                z-index: 2;
            }

            &:last-child {
                opacity: 0;
                z-index: 1;
            }
        }
    }

    .buttons-container {
        overflow: hidden;
        background-color: rgba(0, 0, 0, $transparency);
        border-radius: 50px;
        transition: background-color 1s ease-out;
        padding: 8px 4px;

        &:first-child {
            margin-right: 48px;
        }

        &:last-child {
            margin-left: 48px;
        }

        a {
            width: 100px;
            display: inline-block;
            text-align: center;
            margin-left: 6px;
            margin-right: 6px;
            padding: 8px 14px;
            border-radius: 50px;
            cursor: pointer;

            &.active {
                background-color: rgba($green, $transparency);
            }

            &:hover {
                background-color: rgba($darkergreen, $transparency);
            }
        }
    }
}
</style>

<script>
const navigator = document.getElementById("navigator") as HTMLElement;

// Prevents to-same-page navigation which ended up breaking animations and more.
const handleLinkClick = (event: MouseEvent) => event.preventDefault();
export const updateNavLinks = () => {
    const currentPath = window.location.pathname;
    const links = navigator.querySelectorAll("a");
    links.forEach(link => {
        link.removeEventListener("click", handleLinkClick);
        if (link.pathname === currentPath) {
            link.addEventListener("click", handleLinkClick);
        }
    });
};

document.addEventListener('astro:page-load', () => {
    updateNavLinks();
    const currentPath = window.location.pathname;
    document.querySelectorAll("nav a").forEach(link => {
        if (link.getAttribute("href") === currentPath) {
            link.classList.add("active");
        } else {
            link.classList.remove("active");
        }

        link.addEventListener("click", () => {
            const menu = document.getElementById("mobile-menu-dropdown");
            menu?.classList.toggle("hidden");
        });
    });

    document.getElementById("mobile-menu-button")?.addEventListener("click", () => {
        const menu = document.getElementById("mobile-menu-dropdown");
        menu?.classList.toggle("hidden");
    });

    var mobileMenuScrolled = false;
    document.addEventListener("scroll", () => {
        if (window.scrollY > 0) {
            if (!mobileMenuScrolled) {
                mobileMenuScrolled = true;
                //gsap.to("#mobile-menu", { background: `rgba(${green.substring(4, green.length - 1)}, ${transparency})`, duration: 0.4, ease: "power4.out" });
            }
        } else if (mobileMenuScrolled) {
            //gsap.to("#mobile-menu", { background: `rgba(${green.substring(4, green.length - 1)}, 1)`, duration: 0.4, ease: "power4.out", onComplete: () => { mobileMenuScrolled = false; } });
        }
    });

    function updateStryxusClock() {
        const clockElement = document.querySelector('#stryxus-clock');

        if (clockElement) {
            const londonTime = new Date().toLocaleString("en-GB", {
                timeZone: "Europe/London",
                hour12: false,
                hour: "2-digit",
                minute: "2-digit",
                second: "2-digit"
            });
            
            const userOffsetMinutes = new Date().getTimezoneOffset(); // Local offset in minutes
            const londonOffsetMinutes = -60; // UK is UTC+1 during BST
            const relativeOffsetMinutes = userOffsetMinutes - londonOffsetMinutes;

            const offsetHours = Math.floor(relativeOffsetMinutes / 60);
            const offsetMinutes = Math.abs(relativeOffsetMinutes % 60);
            const offsetSign = relativeOffsetMinutes > 0 ? "+" : "-";
            const formattedOffset = `${offsetSign}${Math.abs(offsetHours).toString().padStart(2, "0")}:${offsetMinutes.toString().padStart(2, "0")}`;

            clockElement.textContent = `${londonTime} | UTC${formattedOffset}`;
        }
    }

    setInterval(updateStryxusClock, 1000);
    updateStryxusClock();

    const status = document.querySelector('#stryxus-status');
    const discordEventStatus = new EventSource('/api/discord');
    var result: any;

    discordEventStatus.onmessage = (event) => {
        const data = JSON.parse(event.data);
        result = data.status;

        if (status) {
            status.textContent = `Status: ${data.status}`;
        }
    };

    discordEventStatus.onerror = () => {
        discordEventStatus.close();
    };

    setTimeout(() => {
        if (!result && status) {
            status.textContent = 'Status: Cannot fetch from bot!';
        }
    }, 5000);
});

updateNavLinks();
</script>

